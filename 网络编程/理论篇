一、客户端\服务端架构
    --- C/S架构 -- 分为硬件cs和软件cs(web服务) 浏览器--BS架构


二、OSI参考模型（七层） - 开放系统互连的体系结构 - Open System Interconnection
1.物理层 --- 连接的介质（双绞线）--- 发送电信号（01010101） --- 单位： 比特

2.数据链路层 ---- 数据包分组 ----- 电信号变的有意义 ---- 标准：以太网协议ethernet
 --- 基于广播的方式发送（局域网中） - 广播所有人能够收到 -
 将大局域网分成一个个小的局域网（mac地址-计算机在局域网中的地址，ip-局域网的地址，分为网络号和主机号）-

3.网络层 --- 跑IP协议 --- IP配置网卡中（可以确定子网包含，mac地址）地址，它可以确定唯一的服务程序，确定局域网的位置，
计算目标IP地址 - 是否在一个子网内  - 如果不在 - 转发到网关 - 再转发到目标局域网

4.传输层 --- 跑 tcp\udp - 跑端口号  - 传输单位：报文  - 提供建立-维护-取消传输连接的功能

5.会话层 --- 提供访问验证和会话管理在内的建立和维护应用之间的通信机制 - 会话层以上的单位统称为报文

6.表示层 --- 提供格式化的表示和数据转换服务，数据的压缩、解压，加密解密等工作

7.应用层 --- 进程之间的通信性质，满足用户需要网络与应用软件之间的接口服务

--- 会话表示应用统称为应用也叫5层协议


三、Socket层 -- 应用层与传输层之间的抽象层

它是应用层与TCP/IP协议通信的一组接口，用socket去组织数据，以符合相应的协议，用户无需关注底层，只需要调接口，所以只需遵循socket编程就
是遵循相应的协议

ip+port 标识了互联网中唯一的一个应用程序
pid - 标识同一机器上的不同进程和线程

应用软件 ----> OS ------> 硬件

内核态内存： 专门存放操作系统代码   ---- 操作系统为了操作硬件
用户态内存： 专门存放用户的应用程序

应用程序（socket）发消息 （用户态）---> 到 内核态缓存 ---- >操作网卡 发送到 客户端(目标网卡) ---> 交到内核态缓存（操作系统） ---- > 应用程序取出内核态缓存的数据

为什么客户端发了个空导致服务端卡主？
原因在于发往空到内核态缓存，在取的时候自然取不到，即无法发消息

# 收发消息跟自己一端的（服务端或客户端）缓存有关

队列： 先进先出  堆栈： 先进后出

四、 套接字 --- 伯克利套接字/BSD套接字 BSD Unix
AF -- adress family 地址家族

1. 同一台应用程序之间没法直接通信 --- 早期是基于文件系统的套接字来实现 -- 底层的都是文件 -- AF_UNIX

2. 基于网络类型的套接字 --- AF_INET



五、套接字的工作流程

基于TCP工作的套接字：

六、网络协议

tcp连接是一条可靠连接 --- 体现在数据不会丢失 --- 如果对方没回应，丢了 会再发一遍

tcp: 三次握手和四次挥手

1. 三次握手

客户端向服务端发送连接 SYN -- 服务端接收到客户端，向客户端发送 ACK SYN --- 客户端接收到服务端进入 ESTABLISHED状态，并向服务端发起 ACK ---
                    1                               2                                                   3
服务端接收到客户端并进入ESTALISHED状态，此时握手动作完成

握手成功后 ------  进一步进入数据传输状态  ---  read and write

SYN攻击： 利用未知的客户端向服务端发送大量SYN请求 --- 解决办法 扩大半连接池 -- 防止请求进不去

backlog: 半连接池 --- 第二步整个过程就是半连接  服务端依次的从半连接池拿连接

2. 四次挥手
关不关由服务端决定， 谁先数据发完谁主动断开

一搬在大并发中服务端都是主动断开的一方 TIME_WAIT  ------ 为了节省资源

客户端发送FIN_WAIT_1主动关闭 close ---  服务端进入等待状态 向客户端发送确认--- 服务端再次向客户端发送 ---- 客户端收到 并向服务端发送 ---此时服务端处于断开
                1                                   2                       3                         4


为什么要三次握手，四次挥手？
三次：  为了建立 客户端到服务端  服务端到客户端的线  --- 没有数据传输 所以中间的两次合并到一块了
四次：  为了断开 客户端到服务端  服务端到客户端的线  ---  因为中间有数据传输 所以必须要数据传完再断开



